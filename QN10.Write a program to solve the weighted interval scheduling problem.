#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Structure to represent an interval
struct Interval {
    int start, end, weight;
};

// Function to perform binary search to find the last interval that ends before the current interval starts
int binarySearch(const vector<Interval>& intervals, int i) {
    int left = 0, right = i - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (intervals[mid].end <= intervals[i].start) {
            if (intervals[mid + 1].end <= intervals[i].start)
                left = mid + 1;
            else
                return mid;
        } else {
            right = mid - 1;
        }
    }
    return -1;
}

// Function to solve the Weighted Interval Scheduling problem
int weightedIntervalScheduling(vector<Interval>& intervals) {
    // Sort intervals by end time
    sort(intervals.begin(), intervals.end(), [](const Interval& a, const Interval& b) {
        return a.end < b.end;
    });

    int n = intervals.size();
    vector<int> dp(n);  // dp[i] will store the maximum weight for the first i intervals

    // Base case: the first interval can only be taken alone
    dp[0] = intervals[0].weight;

    // Fill dp array for each interval
    for (int i = 1; i < n; i++) {
        // Option 1: Exclude the current interval, take the result from dp[i-1]
        int includeWeight = intervals[i].weight;
        int lastNonConflict = binarySearch(intervals, i);
        if (lastNonConflict != -1) {
            includeWeight += dp[lastNonConflict];
        }

        // Option 2: Exclude the current interval, keep the result from dp[i-1]
        dp[i] = max(dp[i - 1], includeWeight);
    }

    // The last value in dp array will have the maximum weight for the entire problem
    return dp[n - 1];
}

int main() {
    // Input: list of intervals with start, end, and weight
    vector<Interval> intervals = {
        {1, 3, 5},
        {2, 5, 6},
        {4, 6, 5},
        {6, 7, 4},
        {5, 8, 11},
        {7, 9, 2}
    };

    // Solve the problem
    cout << "Maximum weight of non-overlapping intervals: " << weightedIntervalScheduling(intervals) << endl;

    return 0;
}


OUTPUT:
Maximum weight of non-overlapping intervals: 16


>>Time Complexity:

Sorting the intervals takes O(n log n).

The dynamic programming loop runs in O(n).

Each binary search takes O(log n) and is performed once for each interval, leading to an overall complexity of O(n log n).

Thus, the total time complexity is O(n log n).

>>Space Complexity:

The space complexity is O(n) due to the dp array and the sorted list of intervals.
