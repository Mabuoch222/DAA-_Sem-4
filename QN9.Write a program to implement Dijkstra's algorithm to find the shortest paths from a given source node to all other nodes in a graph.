#include <iostream>
#include <vector>
#include <climits>
#include <queue>
using namespace std;

class Graph {
public:
    int V;  // Number of vertices
    vector<vector<pair<int, int>>> adjList;  // Adjacency list representation of the graph (pair<neighbor, weight>)

    // Constructor to initialize the graph
    Graph(int V) {
        this->V = V;
        adjList.resize(V);
    }

    // Function to add an edge to the graph
    void addEdge(int u, int v, int weight) {
        adjList[u].push_back({v, weight});  // Add edge u -> v with given weight
        adjList[v].push_back({u, weight});  // Add edge v -> u (since the graph is undirected)
    }

    // Function to perform Dijkstra's algorithm to find the shortest path
    void dijkstra(int source) {
        vector<int> dist(V, INT_MAX);  // Distance array to store the shortest distance from the source
        dist[source] = 0;  // Distance to the source is 0

        // Min-heap priority queue to select the vertex with the minimum distance
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, source});  // Start with the source node

        while (!pq.empty()) {
            int u = pq.top().second;  // Vertex with the smallest tentative distance
            pq.pop();

            // Visit each neighbor of the current vertex
            for (auto& neighbor : adjList[u]) {
                int v = neighbor.first;  // Neighbor vertex
                int weight = neighbor.second;  // Edge weight

                // If a shorter path to v is found
                if (dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;  // Update the distance to v
                    pq.push({dist[v], v});  // Push the updated distance and vertex into the priority queue
                }
            }
        }

        // Print the shortest distances from the source to all other vertices
        cout << "Shortest distances from source " << source << ":\n";
        for (int i = 0; i < V; i++) {
            cout << "Node " << i << ": ";
            if (dist[i] == INT_MAX) {
                cout << "Unreachable\n";  // If the distance is still infinity, the node is unreachable
            } else {
                cout << dist[i] << endl;
            }
        }
    }
};

int main() {
    // Create a graph with 5 vertices
    Graph g(5);

    // Add edges with weights to the graph
    g.addEdge(0, 1, 10);
    g.addEdge(0, 4, 5);
    g.addEdge(1, 2, 1);
    g.addEdge(1, 4, 2);
    g.addEdge(2, 3, 4);
    g.addEdge(3, 4, 3);

    // Run Dijkstra's algorithm from source node 0
    g.dijkstra(0);

    return 0;
}


OUTPUT:
Shortest distances from source 0:
Node 0: 0
Node 1: 8
Node 2: 9
Node 3: 12
Node 4: 5




Time Complexity:
>>Time Complexity: O((V + E) log V), where V is the number of vertices and E is the number of edges.

>>This is due to the priority queue operations (insertion and extraction) being logarithmic in time.

Space Complexity: O(V + E), as we need to store the graph (adjacency list), the distances, and the priority queue.


