#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
using namespace std;

// Class to represent a graph
class Graph {
public:
    unordered_map<int, vector<int>> adjList;

    // Function to add an edge to the graph
    void addEdge(int u, int v) {
        adjList[u].push_back(v);
        adjList[v].push_back(u);  // Because it's an undirected graph
    }

    // Function to perform BFS and display the nodes
    void BFS(int start) {
        unordered_map<int, bool> visited;  // Track visited nodes
        queue<int> q;

        visited[start] = true;
        q.push(start);

        while (!q.empty()) {
            int node = q.front();
            q.pop();
            cout << node << " ";

            // Visit all the neighbors of the current node
            for (int neighbor : adjList[node]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.push(neighbor);
                }
            }
        }
    }
};

int main() {
    Graph g;

    // Add edges to the graph (example graph)
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);
    g.addEdge(2, 6);

    // Perform BFS starting from node 0
    cout << "Breadth-First Search starting from node 0: ";
    g.BFS(0);
    cout << endl;

    return 0;
}


OUTPUT:Breadth-First Search starting from node 0: 0 1 2 3 4 5 6



Time Complexity:
Time Complexity: O(V + E), where V is the number of vertices (nodes) and E is the number of edges. Each node and edge is processed at most once.

Space Complexity: O(V), since we use a queue and an unordered map to store visited nodes.
