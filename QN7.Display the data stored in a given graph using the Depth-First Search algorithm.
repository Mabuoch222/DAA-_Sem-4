#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;

// Class to represent a graph
class Graph {
public:
    unordered_map<int, vector<int>> adjList;

    // Function to add an edge to the graph
    void addEdge(int u, int v) {
        adjList[u].push_back(v);
        adjList[v].push_back(u);  // Because it's an undirected graph
    }

    // Function to perform DFS and display the nodes
    void DFS(int start) {
        unordered_map<int, bool> visited;  // Track visited nodes
        DFSHelper(start, visited);
    }

private:
    // Helper function for recursive DFS
    void DFSHelper(int node, unordered_map<int, bool>& visited) {
        // Mark the current node as visited and display it
        visited[node] = true;
        cout << node << " ";

        // Recur for all the neighbors of the current node
        for (int neighbor : adjList[node]) {
            if (!visited[neighbor]) {
                DFSHelper(neighbor, visited);
            }
        }
    }
};

int main() {
    Graph g;

    // Add edges to the graph (example graph)
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);
    g.addEdge(2, 6);

    // Perform DFS starting from node 0
    cout << "Depth-First Search starting from node 0: ";
    g.DFS(0);
    cout << endl;

    return 0;
}


OUTPUT:
Depth-First Search starting from node 0: 0 1 3 4 2 5 6


Time Complexity:
>>Time Complexity: O(V + E), where V is the number of vertices (nodes) and E is the number of edges. Each node and edge is processed at most once.

>>Space Complexity: O(V), as we use a stack (implicitly through recursion) and a map to keep track of visited nodes.
