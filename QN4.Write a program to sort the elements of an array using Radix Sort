#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Function to perform counting sort based on a specific digit (place value)
void countingSort(vector<int>& arr, int n, int exp) {
    vector<int> output(n);  // Output array
    vector<int> count(10, 0);  // Count array for storing frequency of digits (0-9)

    // Store count of occurrences in count[]
    for (int i = 0; i < n; i++) {
        count[(arr[i] / exp) % 10]++;
    }

    // Change count[i] so that it contains actual position of this digit in output[]
    for (int i = 1; i < 10; i++) {
        count[i] += count[i - 1];
    }

    // Build the output array
    for (int i = n - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }

    // Copy the sorted output into the original array
    for (int i = 0; i < n; i++) {
        arr[i] = output[i];
    }
}

// Function to perform Radix Sort
void radixSort(vector<int>& arr) {
    int n = arr.size();

    // Find the maximum number to know the number of digits
    int max = *max_element(arr.begin(), arr.end());

    // Apply counting sort for every digit (place value)
    for (int exp = 1; max / exp > 0; exp *= 10) {
        countingSort(arr, n, exp);
    }
}

int main() {
    vector<int> arr = {170, 45, 75, 90, 802, 24, 2, 66};
    
    cout << "Original array: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    radixSort(arr);

    cout << "Sorted array: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}


OUTPUT:
Original array: 170 45 75 90 802 24 2 66 
Sorted array: 2 24 45 66 75 90 170 802


Time Complexity:
Time Complexity: O(nk), where n is the number of elements in the array and k is the number of digits in the largest number (or the number of passes needed for sorting).

Space Complexity: O(n), as we need additional space for the output array and the count array during counting sort.
